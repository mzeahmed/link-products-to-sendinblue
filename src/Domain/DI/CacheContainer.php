<?php

namespace LPTS\Domain\DI;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class CacheContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->methodMap = [
            'LPTS\\Application\\Controllers\\Admin\\AdminDatabaseController' => 'getAdminDatabaseControllerService',
            'LPTS\\Application\\Controllers\\Admin\\AdminEnqueueController' => 'getAdminEnqueueControllerService',
            'LPTS\\Application\\Controllers\\Admin\\SettingsController' => 'getSettingsControllerService',
            'LPTS\\Application\\Controllers\\Admin\\Woocommerce\\CustomProductColumnController' => 'getCustomProductColumnControllerService',
            'LPTS\\Application\\Controllers\\Admin\\Woocommerce\\CustomProductPanelController' => 'getCustomProductPanelControllerService',
            'LPTS\\Application\\Controllers\\Public\\Woocommerce\\PaymentComplete' => 'getPaymentCompleteService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            '.abstract.instanceof.LPTS\\Application\\Controllers\\Admin\\AdminDatabaseController' => true,
            '.abstract.instanceof.LPTS\\Application\\Controllers\\Admin\\AdminEnqueueController' => true,
            '.abstract.instanceof.LPTS\\Application\\Controllers\\Admin\\SettingsController' => true,
            '.abstract.instanceof.LPTS\\Application\\Controllers\\Admin\\Woocommerce\\CustomProductColumnController' => true,
            '.abstract.instanceof.LPTS\\Application\\Controllers\\Admin\\Woocommerce\\CustomProductPanelController' => true,
            '.abstract.instanceof.LPTS\\Application\\Controllers\\Public\\Woocommerce\\PaymentComplete' => true,
            '.instanceof.LPTS\\Application\\Contract\\AdminControllerInterface.0.LPTS\\Application\\Controllers\\Admin\\AdminDatabaseController' => true,
            '.instanceof.LPTS\\Application\\Contract\\AdminControllerInterface.0.LPTS\\Application\\Controllers\\Admin\\AdminEnqueueController' => true,
            '.instanceof.LPTS\\Application\\Contract\\AdminControllerInterface.0.LPTS\\Application\\Controllers\\Admin\\Woocommerce\\CustomProductColumnController' => true,
            '.instanceof.LPTS\\Application\\Contract\\AdminControllerInterface.0.LPTS\\Application\\Controllers\\Admin\\Woocommerce\\CustomProductPanelController' => true,
            '.instanceof.LPTS\\Application\\Contract\\PublicControllerInterface.0.LPTS\\Application\\Controllers\\Admin\\SettingsController' => true,
            '.instanceof.LPTS\\Application\\Contract\\PublicControllerInterface.0.LPTS\\Application\\Controllers\\Public\\Woocommerce\\PaymentComplete' => true,
            'LPTS\\Bootstrap' => true,
            'LPTS\\Domain\\DI\\CacheContainer' => true,
            'LPTS\\Domain\\DI\\Compilers\\AdminControllerPass' => true,
            'LPTS\\Domain\\DI\\Compilers\\PublicControllerPass' => true,
            'LPTS\\Domain\\DI\\ServicesContainer' => true,
            'LPTS\\Domain\\Dto\\PluginData' => true,
            'LPTS\\Domain\\Services\\Admin\\SettingsService' => true,
            'LPTS\\Infrastructure\\Database\\Upgrade' => true,
            'LPTS\\Infrastructure\\External\\Brevo\\Api' => true,
            'LPTS\\Infrastructure\\External\\Brevo\\ApiManager' => true,
            'LPTS\\Infrastructure\\View\\Renderer' => true,
            'LPTS\\Infrastructure\\WordPress\\Hook\\Admin\\AdminEnqueueHook' => true,
            'LPTS\\Infrastructure\\WordPress\\Hook\\Admin\\SettingsHook' => true,
            'LPTS\\Infrastructure\\WordPress\\Hook\\Admin\\Woocommerce\\CustomProductColumnHook' => true,
            'LPTS\\Infrastructure\\WordPress\\Hook\\Admin\\Woocommerce\\CustomProductPanelHook' => true,
            'LPTS\\Infrastructure\\WordPress\\I18n\\I18n' => true,
            'LPTS\\Shared\\Utils\\Utils' => true,
            'LPTS\\index' => true,
        ];
    }

    /**
     * Gets the public 'LPTS\Application\Controllers\Admin\AdminDatabaseController' shared autowired service.
     *
     * @return \LPTS\Application\Controllers\Admin\AdminDatabaseController
     */
    protected static function getAdminDatabaseControllerService($container)
    {
        $container->services['LPTS\\Application\\Controllers\\Admin\\AdminDatabaseController'] = $instance = new \LPTS\Application\Controllers\Admin\AdminDatabaseController();

        $instance->register($instance);

        return $instance;
    }

    /**
     * Gets the public 'LPTS\Application\Controllers\Admin\AdminEnqueueController' shared autowired service.
     *
     * @return \LPTS\Application\Controllers\Admin\AdminEnqueueController
     */
    protected static function getAdminEnqueueControllerService($container)
    {
        $container->services['LPTS\\Application\\Controllers\\Admin\\AdminEnqueueController'] = $instance = new \LPTS\Application\Controllers\Admin\AdminEnqueueController(new \LPTS\Infrastructure\WordPress\Hook\Admin\AdminEnqueueHook());

        $instance->register($instance);

        return $instance;
    }

    /**
     * Gets the public 'LPTS\Application\Controllers\Admin\SettingsController' shared autowired service.
     *
     * @return \LPTS\Application\Controllers\Admin\SettingsController
     */
    protected static function getSettingsControllerService($container)
    {
        $container->services['LPTS\\Application\\Controllers\\Admin\\SettingsController'] = $instance = new \LPTS\Application\Controllers\Admin\SettingsController(new \LPTS\Infrastructure\WordPress\Hook\Admin\SettingsHook(new \LPTS\Domain\Services\Admin\SettingsService(($container->privates['LPTS\\Infrastructure\\View\\Renderer'] ??= new \LPTS\Infrastructure\View\Renderer()))));

        $instance->register($instance);

        return $instance;
    }

    /**
     * Gets the public 'LPTS\Application\Controllers\Admin\Woocommerce\CustomProductColumnController' shared autowired service.
     *
     * @return \LPTS\Application\Controllers\Admin\Woocommerce\CustomProductColumnController
     */
    protected static function getCustomProductColumnControllerService($container)
    {
        $container->services['LPTS\\Application\\Controllers\\Admin\\Woocommerce\\CustomProductColumnController'] = $instance = new \LPTS\Application\Controllers\Admin\Woocommerce\CustomProductColumnController(new \LPTS\Infrastructure\WordPress\Hook\Admin\Woocommerce\CustomProductColumnHook());

        $instance->register($instance);

        return $instance;
    }

    /**
     * Gets the public 'LPTS\Application\Controllers\Admin\Woocommerce\CustomProductPanelController' shared autowired service.
     *
     * @return \LPTS\Application\Controllers\Admin\Woocommerce\CustomProductPanelController
     */
    protected static function getCustomProductPanelControllerService($container)
    {
        $container->services['LPTS\\Application\\Controllers\\Admin\\Woocommerce\\CustomProductPanelController'] = $instance = new \LPTS\Application\Controllers\Admin\Woocommerce\CustomProductPanelController(new \LPTS\Infrastructure\WordPress\Hook\Admin\Woocommerce\CustomProductPanelHook(($container->privates['LPTS\\Infrastructure\\View\\Renderer'] ??= new \LPTS\Infrastructure\View\Renderer())));

        $instance->register($instance);

        return $instance;
    }

    /**
     * Gets the public 'LPTS\Application\Controllers\Public\Woocommerce\PaymentComplete' shared autowired service.
     *
     * @return \LPTS\Application\Controllers\Public\Woocommerce\PaymentComplete
     */
    protected static function getPaymentCompleteService($container)
    {
        $container->services['LPTS\\Application\\Controllers\\Public\\Woocommerce\\PaymentComplete'] = $instance = new \LPTS\Application\Controllers\Public\Woocommerce\PaymentComplete();

        $instance->register($instance);

        return $instance;
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name);
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (!isset($this->parameterBag)) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        throw new ParameterNotFoundException($name);
    }

    protected function getDefaultParameters(): array
    {
        return [
            'app.public_controller_ids' => [
                0 => 'LPTS\\Application\\Controllers\\Admin\\SettingsController',
                1 => 'LPTS\\Application\\Controllers\\Public\\Woocommerce\\PaymentComplete',
            ],
            'app.admin_controller_ids' => [
                0 => 'LPTS\\Application\\Controllers\\Admin\\AdminDatabaseController',
                1 => 'LPTS\\Application\\Controllers\\Admin\\AdminEnqueueController',
                2 => 'LPTS\\Application\\Controllers\\Admin\\Woocommerce\\CustomProductColumnController',
                3 => 'LPTS\\Application\\Controllers\\Admin\\Woocommerce\\CustomProductPanelController',
            ],
        ];
    }
}
